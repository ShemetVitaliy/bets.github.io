/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n$(document).ready(() => {\n  function initUserTheme() {\n    const htmlBlock = document.documentElement;\n    const saveUserTheme = localStorage.getItem('user-theme');\n    const themeButton = $('.switch-theme');\n    const themeText = $('.header__theme--text');\n    let userTheme;\n    if (window.matchMedia) {\n      userTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    }\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n      !saveUserTheme ? changeTheme() : null;\n    });\n    themeButton.on('click', () => {\n      changeTheme(true);\n    });\n\n    function setThemeClass() {\n      if (saveUserTheme) {\n        htmlBlock.classList.add(saveUserTheme);\n        if (saveUserTheme === 'dark') {\n          themeButton.addClass('dark');\n          themeText.text('Dark theme');\n        } else {\n          themeButton.removeClass('dark');\n          themeText.text('Light theme');\n        }\n      } else {\n        htmlBlock.classList.add(userTheme);\n        if (userTheme === 'dark') {\n          themeButton.addClass('dark');\n          themeText.text('Dark theme');\n        } else {\n          themeButton.removeClass('dark');\n          themeText.text('Light theme');\n        }\n      }\n    }\n\n    function changeTheme(saveTheme = false) {\n      let currentTheme = htmlBlock.classList.contains('light') ? 'light' : 'dark';\n      let newTheme;\n      if (currentTheme === 'light') {\n        newTheme = 'dark';\n        themeButton.addClass('dark');\n        themeText.text('Dark theme');\n      } else if (currentTheme === 'dark') {\n        newTheme = 'light';\n        themeButton.removeClass('dark');\n        themeText.text('Light theme');\n      }\n      htmlBlock.classList.remove(currentTheme);\n      htmlBlock.classList.add(newTheme);\n      saveTheme ? localStorage.setItem('user-theme', newTheme) : null;\n    }\n\n    setThemeClass();\n  }\n\n  function setCurrentYear() {\n    $('.current-year').text(new Date().getFullYear());\n  }\n\n  function slideToggle() {\n    $('.links').on('click', function () {\n      $(this).siblings('.full-menu__links').toggleClass('active');\n      $(this).toggleClass('active');\n    });\n    $('.contacts').on('click', function () {\n      $(this).siblings('.full-menu__contacts').toggleClass('active');\n      $(this).toggleClass('active');\n    });\n  }\n\n  function initMenu() {\n    $('.menu').click(function () {\n      $('body').addClass('fixed');\n      $('.full-menu').addClass('open');\n    });\n\n    $('.full-menu__close').click(function () {\n      $('body').removeClass('fixed');\n      $('.full-menu').removeClass('open');\n    });\n  }\n\n  initUserTheme();\n  initMenu();\n  setCurrentYear();\n  slideToggle();\n});\n\n\n//# sourceURL=webpack://gulp-template/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;